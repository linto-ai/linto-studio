{
  "/api/organizations/{organizationId}/sessions/purge": {
    "post": {
      "tags": ["sessions"],
      "summary": "Purge terminated sessions or all sessions if force is true",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "in": "query",
          "name": "force",
          "description": "Force deletion of all sessions",
          "required": false,
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Sessions purged successfully"
        }
      }
    }
  },
  "/api/organizations/{organizationId}/sessions": {
    "get": {
      "tags": ["sessions"],
      "summary": "Get all sessions",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "in": "query",
          "name": "limit",
          "description": "Maximum number of sessions in the answer",
          "required": false,
          "schema": {
            "type": "integer"
          }
        },
        {
          "in": "query",
          "name": "offset",
          "description": "Offset from the start the number of sessions",
          "required": false,
          "schema": {
            "type": "integer"
          }
        },
        {
          "in": "query",
          "name": "searchName",
          "description": "Name of the session to search",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "statusList",
          "description": "Session status to search for. Multiple statuses can be specified, separated by a comma.",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "organizationId",
          "description": "Search for sessions belonging to this organization.",
          "required": false,
          "schema": {
            "type": "string"
          }
        },
        {
          "in": "query",
          "name": "visibility",
          "description": "Search for sessions with a specific visibility.",
          "required": false,
          "schema": {
            "type": "string",
            "enum": ["private", "organization", "public"]
          }
        }
      ],
      "responses": {
        "200": {
          "description": "The list of sessions",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SessionPaginationAnswer"
                }
              }
            }
          }
        }
      }
    },
    "post": {
      "tags": ["sessions"],
      "summary": "Create a new session",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SessionRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionAnswer"
              }
            }
          }
        }
      }
    }
  },
  "/api/organizations/{organizationId}/sessions/{id}": {
    "get": {
      "tags": ["sessions"],
      "summary": "Get a session by ID",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "The session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionAnswerWithCaptions"
              }
            }
          }
        },
        "404": {
          "$ref": "#/components/responses/NotFound"
        }
      }
    },
    "put": {
      "tags": ["sessions"],
      "summary": "Update a session and its channels",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "requestBody": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/SessionUpdateRequest"
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "OK",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionAnswerWithCaptions"
              }
            }
          }
        }
      }
    },
    "delete": {
      "tags": ["sessions"],
      "summary": "Delete a session by ID",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "Session successfully deleted"
        },
        "404": {
          "$ref": "#/components/responses/NotFound"
        }
      }
    }
  },
  "/api/organizations/{organizationId}/sessions/{id}/start-bot": {
    "post": {
      "tags": ["sessions"],
      "summary": "Starts a bot for a specific session",
      "description": "This endpoint starts a bot for the given session ID with a specified channel ID, URL, and bot type. Available bot types are 'jitsi', 'youtube', and 'bigbluebutton'.",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "The UUID of the session for which the bot is to be started.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "url": {
                  "type": "string",
                  "format": "uri",
                  "description": "The URL to start the bot."
                },
                "channelId": {
                  "type": "integer",
                  "description": "The id of the channel."
                },
                "botType": {
                  "type": "string",
                  "description": "The type of bot to start.",
                  "enum": ["jitsi", "youtube", "bigbluebutton"]
                }
              },
              "required": ["url", "channelId", "botType"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Bot started successfully."
        },
        "400": {
          "description": "Bad request. sessionId, url, channelId, and botType are required."
        },
        "404": {
          "description": "Session or channel not found."
        }
      }
    }
  },
  "/api/organizations/{organizationId}/sessions/{id}/stop-bot": {
    "post": {
      "tags": ["sessions"],
      "summary": "Stops a bot for a specific session",
      "description": "This endpoint stops a bot for the given session ID with a specified channel id.",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "The UUID of the session for which the bot is to be stopped.",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "channelId": {
                  "type": "integer",
                  "description": "The id of the channel to stop the bot."
                }
              },
              "required": ["channelId"]
            }
          }
        }
      },
      "responses": {
        "200": {
          "description": "Bot stopped successfully."
        },
        "400": {
          "description": "Bad request. sessionId and channelId are required."
        },
        "404": {
          "description": "Session or channel not found."
        }
      }
    }
  },
  "/api/organizations/{organizationId}/sessions/{id}/stop": {
    "put": {
      "tags": ["sessions"],
      "summary": "Stop a session by ID",
      "parameters": [
        {
          "in": "path",
          "name": "organizationId",
          "type": "string",
          "format": "uuid",
          "required": true,
          "description": "uuid string identifier for an organization"
        },
        {
          "name": "id",
          "in": "path",
          "description": "Session ID",
          "required": true,
          "schema": {
            "type": "string",
            "format": "uuid"
          }
        }
      ],
      "responses": {
        "200": {
          "description": "The session",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SessionAnswerWithCaptions"
              }
            }
          }
        },
        "404": {
          "$ref": "#/components/responses/NotFound"
        }
      }
    }
  }
}
