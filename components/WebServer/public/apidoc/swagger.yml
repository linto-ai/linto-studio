openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Conversation manager API client'
  description: 'a tool for listening to, reading, editing and annotating a conversation transcript'
  termsOfService: https://doc.linto.ai/#/?id=gnu-affero-general-public-licence-v3
  contact:
    name: LINAGORA
    url: http://linto.ai
    email: contact@linto.ai
#servers:
host: localhost:8000
basePath: /
schemes:
 - https
paths:
  /login: 
    post:
      tags:
        - "users"
      summary: Logs in a user and returns the json web token 
      requestBody:
        required: true
        description: A JSON object containing the username and password.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      # security: []    # no authentication
      responses:
        '200':
          description: 
            Successfully authenticated and token is returned to user.
            You need to include token in subsequent requests.
        '400':
          description: 
        '404':
          description:
        default:
          description:
  /api/user: 
    post:
      tags:
        - "users"
      operationId: createUser
      summary: creates a user
      requestBody:
        required: true
        description: A JSON object containing the username and password.
        content:   
          application/json:
            schema: 
              type: object
              properties:
                userName: 
                  type: string
                password:
                  type: string
                email:
                  type: string
                  format: email
                # convoAccess:
                #   type: array
                #   items: 
                #     type: object 
                #     properties:
                #       conversationid:
                #         type: string 
                #       accessType:
                #         type: string
      responses:
        '201':
          description: user is successfully created
          schema:
            $ref: '#/components/schemas/User'
        '400':
          description: bad request error
          schema:
            $ref: '#/components/schemas/Error'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /api/user/{userid}:
    get: 
      tags:
        - "users"
      operationId: getUser
      summary: Gets a user by id
      description: gets a single user
      parameters:
        - in: path
          name: userid
          type: string
          required: true
        # - in: header
        #   name: access-token
        #   type: string
        #   required: true
      responses:
        '200':
          description: json document 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          schema:
            $ref: "#/components/responses/UnauthorizedError"
    put:
      tags:
        - "users"
      summary: updates a user password
      description: Adds conversation(s) id to a user's accessedMeetings
      requestBody:
        required: true 
        description: A JSON object containing the user id and conversation id(s).
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                accessedMeetings:
                  type: array
                  items:
                    type: integer 
      responses:
        '200':
          description: Successfully updated.
        '400': 
          description: Invalid id supplied 
        '404':
          description: User not found 
        '401':
          $ref: "#/components/responses/UnauthorizedError"
    delete:
      tags:
        - "users"
      summary: deletes a user by id
      parameters:
        - in: path
          name: userid
          schema:
            type: string
          required: true
      responses:
        '200':
          description: json document 
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /api/user/{userid}/addaccess/{conversationid}:
    patch:
      tags:
        - "users"
      operationId: updateUserAccess
      summary: gives a user access to conversation(s)
      requestBody:
        required: true
        description: A JSON object containing the conversationid and user rights
        content:   
          application/json:
            schema: 
              type: object
              properties:
                ownerId:
                  type: string 
                userId:
                  type: string
                convoId: 
                  type: string
                userRights:
                  type: string 
      responses:
        '200':
          description: successfully updated 
        '403':
          description: not authorized
        '404':
          description: not found
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /api/user/{userid}/removeaccess/{conversationid}: 
    patch:
      tags:
        - "users"
      operationId: removeUserAccess
      summary: removes access to conversation(s) from a user
      requestBody:
        required: true
        description: A JSON object containing the conversationid and user rights
        content:   
          application/json:
            schema: 
              type: object
              properties:
                userId:
                  type: string
                convoId: 
                  type: string
      responses:
        '200':
          description: successfully removed
        '403':
          description: not authorized
        '404':
          description: not found
        '401':
          $ref: "#/components/responses/UnauthorizedError"
  /api/users: 
    get:
      tags:
        - "users"
      summary: gets all users 
      # requestBody:
      #   description:
      responses:
        '200':
          description: returns a list of users 
          content:
            application/json:
              schema:
                type: array 
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: "#/components/responses/UnauthorizedError"

  /api/conversations: 
    get:
      tags:
        - "conversations"
      summary: gets all conversations
      responses:
        '200':
          description: returns a list of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '401':
          $ref: "#/components/responses/UnauthorizedError"

  /api/conversations/{conversationids}:
    get:
      tags:
        - "conversations"
      summary: gets all conversations by ids in list of ids

  /api/conversation:
    post:
      tags: 
        - "conversation"
      summary: creates a new conversation base
      requestBody:
        required: true
        description: A JSON object containing the owner id and conversation name.
        content:   
          application/json:
            schema: 
              type: object
              properties:
                convoName: 
                  type: string
                ownerId:
                  type: string
      responses:
        '201':
          description: conversation is successfully created 
          schema:
            $ref: '#/components/schemas/Conversation'
        links:
          updateUserConvoAccess:
            operationId: updateUserAccess
            parameters: 
              conversationid: ''
            # description: > 
            #   The conversation id value can be used to update 
        '400':
          description: bad request error
          schema:
            $ref: '#/components/schemas/Error'
        '401':
          $ref: "#/components/responses/UnauthorizedError"

  /api/conversation/{conversationid}: 
    get: 
      tags:
        - "conversation"
      summary: gets a conversation by id 
    delete: 
      tags:
        - "conversation"
      summary: deletes conversation

  /api/conversation/{conversationid}/agenda:
    put:
      tags:
        - "conversation/metadata"
      summary: replaces (empty) agenda 
    patch:
      tags:
        - "conversation/metadata"
      summary: modifies conversation agenda

  /api/conversation/{conversationid}/summary:
    put:
      tags:
        - "conversation/summary"
      summary: replaces (empty) summary 
    patch:
      tags:
        - "conversation/summary"
      summary: modifies conversation summary 
  
  /api/conversation/{conversationid}/speakers:
    get:
      tags:
        - "conversation/speakers"
      summary: gets all speakers in a conversation
      operationId: getSpeakers
      description: gets all speaker ids, names and audio times for voice example
      parameters:
        - in: path
          name: conversationid
          type: string
          required: true
      responses:
        '200':
          description: json document 
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Speakers'
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error
    post:
      tags:
        - "conversation/speakers"
      summary: creates a new speaker in a conversation
      operationId: createSpeaker
      description: creates a new speaker id with name but without voice example
      requestBody:
        required: true
        description: a json object with conversationid and new speaker name
        content:
          application/json:
            schema:
              type: object
              properties:
                convoid:
                  type: string
                speakername:
                  type: string 
      responses:
        '200':
          description: json document
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Speakers"
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error
            
  /api/conversation/{conversationid}/speakers/{speakerid}:
    # get:
    #   tags:
    #     - "conversation/speakers"
    #   summary: gets speaker name by speakerid

    patch:
      tags:
        - "conversation/speakers"
      summary: modifies speaker name
      operationId: identifySpeaker
      description: replaces speaker name for a given conversationid /speaker id
      requestBody:
        required: true
        description: A JSON object containing the conversationid, speakerid and new speaker name
        content:   
          application/json:
            schema: 
              type: object
              properties:
                speakerid:
                  type: string
                convoid: 
                  type: string
                speakername:
                  type: string  
      responses:
        '200':
          description: speaker successfully updated
          schema:
            $ref: '#components/schemas/Speakers'
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error        
    delete:
      tags:
        - "conversation/speakers"
      summary: deletes speaker from conversation
      operationId: deleteSpeaker
      description: removes speaker by id if id not in transcript
      requestBody:
        required: true
        description: A json object containing conversationid and speakerid
        content:
          application/json:
            schema:
              type: object
              properties:
                speakerid:
                  type: string
                convoid:
                  type: string
      responses:
        '200':
          description: speaker successfully deleted
          schema:
            $ref: '#components/schemas/Speakers'
        '428': 
          description: precondition required
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error        

  /api/conversation/{conversationid}/turns/{speakerid}:
    put:
      tags: 
        - "conversation/speakers"
      summary: replaces all turns with speaker id = X with new speaker id = Y
      operationId: combineSpeakerIds
      description: replaces ids in transcript then deletes old id in speakers
      requestBody:
        required: true
        description: A json object containing conversationid and speakerid and newspeakerid
        content:
          application/json:
            schema:
              type: object
              properties:
                speakerid:
                  type: string
                convoid:
                  type: string
                newspeakerid:
                  type: string
      responses:
        '200':
          description: speakers successfully combined
          schema:
            $ref: '#components/schemas/Speakers'
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error
  /api/conversation/{conversationid}/turn/{speakerid}:      
    post:
      tags:
        - "conversation/speakers"
      summary: replaces speaker in a single turn with a newly created speaker
      operationId: createNewTurnSpeaker
      description: creates a new speaker then updates the turn id using the new speaker id
      requestBody:
        required: true
        description: A JSON object containing the conversationid, turnid and new speaker name
        content:   
          application/json:
            schema: 
              type: object
              properties:
                turnid:
                  type: string
                convoid: 
                  type: string
                speakername:
                  type: string  
      responses:
      '200':
        description: speaker successfully created
      '400':
        description: bad request error
        schema:
          $ref: '#components/schemas/Error'
      '401':
        description: unauthorized error 
        schema:
          $ref: "#/components/responses/UnauthorizedError"
      '404':
        description: not found error  
    put:
      tags: 
        - "conversation/speakers"
      summary: replaces speaker id in a single turn with another speaker id
      operationId: updateSpeakerId
      description: replaces speaker id in a single transcript turn
      requestBody:
        required: true
        description: A json object containing conversationid and speakerid and turnid
        content:
          application/json:
            schema:
              type: object
              properties:
                speakerid:
                  type: string
                convoid:
                  type: string
                turnid:
                  type: string
      responses:
        '200':
          description: turn speaker id successfully updated
        '400':
          description: bad request error
          schema:
            $ref: '#components/schemas/Error'
        '401':
          description: unauthorized error 
          schema:
            $ref: "#/components/responses/UnauthorizedError"
        '404':
          description: not found error      

  /api/conversation/{conversationid}/turn:
    post:
      tags:
        - "conversation/turns"
      summary: creates a new turn 
      operationId: createNewTurn
      description: creates a new turn then updates turn order in text
      requestBody:
        required: true
        description: A json object containing conversationid, speakerid, position
        content:
          application/json:
            schema:
              type: object
              properties:
                speakerid:
                  type: string
                convoid:
                  type: string
                position:
                  type: integer
        responses:
          '200':
            description: turn successfully created 
          '400':
            description: bad request error
          schema:
            $ref: '#components/schemas/Error'
          '401':
            description: unauthorized error 
            schema:
              $ref: "#/components/responses/UnauthorizedError"
          '404':
            description: not found error   
  /api/conversation/{conversationid}/turn/{turnids}:   
    delete:
      tags:
        - "conversation/turns"
      summary: deletes a turn or turns 
      operationId: deleteTurn
      description: deletes a turn 
      requestBody:
        required: true
        description: A json object containing conversationid, list of turnids
        content:
          application/json:
            schema:
              type: object
              properties:
                turnids:
                  type: array 
                  items:
                    type: string
                convoid:
                  type: string
        responses:
          '200':
            description: turns successfully deleted
          '400':
            description: bad request error
          schema:
            $ref: '#components/schemas/Error'
          '401':
            description: unauthorized error 
            schema:
              $ref: "#/components/responses/UnauthorizedError"
          '404':
            description: not found error      
    patch:
      tags:
        - "conversation/turns"
      summary: merges a set of turns 
      operationId: mergeTurns
      description: combines text from all turns into first turn, deletes remaining turns
      requestBody:
        required: true
        description: A json object containing conversationid and an array of turn ids
        content:
          application/json:
            schema:
              type: object
              properties:
                turnids:
                  type: array
                  items:
                    type: string
                convoid:
                  type: string
        responses:
          '200':
            description: turns successfully merged
          '400':
            description: bad request error
          schema:
            $ref: '#components/schemas/Error'
          '401':
            description: unauthorized error 
            schema:
              $ref: "#/components/responses/UnauthorizedError"
          '404':
            description: not found error  

  /api/conversation/{conversationid}/editmode:

  /api/conversation/{conversationid}/annotate:


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid 

  # parameters:
  # requestBodies:
  # responses:
  # headers:
  # examples:
  # links:
  # callbacks:

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
    UserLogin:
      type: object
      properties:
        userName:
          type: string 
        password:
          type: string
          format: password 
          writeOnly: true
      required:
        - userName
        - password
    User:
      type: object
      properties:
        userid:
          type: string
          readOnly: true
        userName:
          type: string 
        email:
          type: string
          format: email
        convoAccess:
          type: array
          items: 
            type: object 
            properties:
              conversationid:
                type: string 
              accessType:
                type: string
        required:
          - userid
          - userName
          - convoAcess 
    Speakers:
      type: array 
      items:
        type: object
        properties:
          speakerid:
            type: string
          speakername:
            type: string
          stime:
            type: string
          etime:
            type: string
    Conversation:
      type: object
      properties:
        conversationid:
          type: string
        lastUpdated:
          type: string
          format: date-time
        startDatetime: 
          type: string
          format: date-time
        endDatetime:
          type: string
        location:
          type: string
        audio:
          type: string
          format: url
        rawTranscript:
          type: string
        locked:
          type: boolean
        users:
          type: array
          items:
            type: object
            properties:
              userid:
                type: string 
              accessType:
                type: string
        agenda:
          type: array
          items:
            type: string 
        speakers:
          type: object 
          properties:
            speakerid:
              type: string
            speakername:
              type: string
            audiosample:
              type: string
              format: mp3??
          required:
            - speakerid
        keywords:
          type: array
          items:
            type: string
        annotations:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            comment:
              type: string
        summary:
          type: string
        processedTranscript:
          type: array 
          items:
            type: object
            properties:
              turnid:
                type: string
              speakerid:
                type: string
              timeStamp:
                type: string
              text:
                type: array
                items:
                  type: object
                  properties:
                    wordid:
                      type: string
                    word:
                      type: string
                    timeStamp:
                      type: string
                  required:
                    - wordid
                    - word
            required:
              - turnid
              - speakerid
      required:
        - conversationid
        - rawTranscript
        - audio
security:
  - bearerAuth: []
