openapi: '3.0.0'
info:
  version: '1.0.0'
  title: 'Conversation manager API client'
  description: 'A tool allowing to play with the conversation manager '
  termsOfService: https://doc.linto.ai/#/?id=gnu-affero-general-public-licence-v3
  contact:
    name: LINAGORA
    url: http://linto.ai
    email: contact@linto.ai
#servers:
host: localhost:8001
basePath: /
schemes:
 - https

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes



paths:
  /auth/login:
    post:
      tags: 
        - "auth"
      summary: AUthenticate user
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: OK


  /api/users/:
    post:
      tags: 
        - "users"
      summary: Adds a new user
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
      responses:
        '201':
          description: OK
    put:
      tags: 
        - "users"
      summary: Update an user
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                firstname:
                  type: string
                lastname:
                  type: string
      responses:
        '200':
          description: OK
    get:
      tags: 
        - "users"
      summary: List all user
      responses:
        '200':
          description: OK
    delete:
      tags: 
        - "users"
      summary: Delete user
      responses:
        '200':
          description: OK

  /api/users/password:
    put:
      tags: 
        - "users"
      summary: Update user passwrd
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: OK

  /api/users/picture:
    put:
      tags: 
        - "users"
      summary: Update user profile picture
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                file:
                  type: file
      responses:
        '200':
          description: OK

  /api/users/{userId}/:
    get:
      tags: 
        - "users"
      summary: Get an user information
      parameters:
        - in: path
          name: userId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an user
      responses:
        '200':
          description: OK


  /api/organizations/:
    post:
      tags: 
        - "organizations"
      summary: Create an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
                type:
                  type: string
      responses:
        '201':
          description: OK
    get:
      tags: 
        - "organizations"
      summary: List all public organization
      responses:
        '200':
          description: OK

  /api/organizations/user/:
    get:
      tags: 
        - "organizations members"
      summary: List self organization
      responses:
        '200':
          description: OK

  /api/organizations/user/{organizationId}/:
    patch:
      tags: 
        - "organizations members"
      summary: Update self visibility from an organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                visibility:
                  type: string
      responses:
        '201':
          description: OK
    delete:
      tags: 
        - "organizations members"
      summary: Remove self from an organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      responses:
        '200':
          description: OK
          


  /api/organizations/{organizationId}/user:
    post:
      tags: 
        - "organizations maintainer"
      summary: Add an user into the organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                email:
                  type: string
                role:
                  type: string
      responses:
        '200':
          description: OK
    patch:
      tags: 
        - "organizations maintainer"
      summary: Update an user role from organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                userId:
                  type: string
                role:
                  type: string
      responses:
        '201':
          description: OK
    delete:
      tags: 
        - "organizations maintainer"
      summary: Remove an user from organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: OK

  /api/organizations/{organizationId}/:
    patch:
      tags: 
        - "organizations admin"
      summary: Update an organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
                token:
                  type: string
                description:
                  type: string
                type:
                  type: string
      responses:
        '201':
          description: OK
    delete:
      tags: 
        - "organizations admin"
      summary: Remove an organization
      parameters:
        - in: path
          name: organizationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an organization
      responses:
        '200':
          description: OK

  /api/conversations/create/:
    post:
      tags: 
        - "conversations"
      summary: Create conversation
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                file:
                  type: file
                name:
                  type: string
                description:
                  type: string
                organizationId:
                  type: uiid
                organizationRole:
                  type: integer
      responses:
        '201':
          description: OK
  /api/conversations/list/:
    get:
      tags: 
        - "conversations"
      summary: List all user conversation
      responses:
        '200':
          description: OK
  /api/conversations/{conversationId}/:
    get:
      tags: 
        - "conversations"
      summary: Get one conversation 
      parameters:
        - in: path
          name: conversationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an conversation
      responses:
        '200':
          description: OK
    patch:
      tags: 
        - "conversations"
      summary: Get one conversation 
      parameters:
        - in: path
          name: conversationId
          type: string 
          format: uuid 
          required: true 
          description: uuid string identifier for an conversation
      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: OK
  /api/conversations/search/text:
    post:
      tags: 
        - "conversations"
      summary: Get one conversation 
      requestBody:
        content:
          multipart/form-data:
            schema:      # Request body contents
              type: object
              properties:
                text:
                  type: string
      responses:
        '200':
          description: OK